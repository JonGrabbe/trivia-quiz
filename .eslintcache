[{"C:\\react-projects\\trivia-quiz\\src\\index.js":"1","C:\\react-projects\\trivia-quiz\\src\\app.js":"2","C:\\react-projects\\trivia-quiz\\src\\quiz.js":"3","C:\\react-projects\\trivia-quiz\\src\\start.js":"4","C:\\react-projects\\trivia-quiz\\src\\question-item.js":"5","C:\\react-projects\\trivia-quiz\\src\\select.js":"6","C:\\react-projects\\trivia-quiz\\src\\radio-button.js":"7","C:\\react-projects\\trivia-quiz\\src\\option.js":"8"},{"size":164,"mtime":1610700014379,"results":"9","hashOfConfig":"10"},{"size":7730,"mtime":1610596306299,"results":"11","hashOfConfig":"10"},{"size":3193,"mtime":1610608217576,"results":"12","hashOfConfig":"10"},{"size":2083,"mtime":1610591468636,"results":"13","hashOfConfig":"10"},{"size":2738,"mtime":1610607998449,"results":"14","hashOfConfig":"10"},{"size":348,"mtime":1610591335941,"results":"15","hashOfConfig":"10"},{"size":715,"mtime":1610498981108,"results":"16","hashOfConfig":"10"},{"size":153,"mtime":1610258149887,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"kjczkx",{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"C:\\react-projects\\trivia-quiz\\src\\index.js",[],["37","38"],"C:\\react-projects\\trivia-quiz\\src\\app.js",["39","40"],"import React from 'react';\r\nimport Start from './start';\r\nimport Quiz from './quiz';\r\n\r\nexport default class App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            score: 0,\r\n            quizStart: false,\r\n            responseError: false\r\n        }\r\n        // this.getData = this.getData.bind(this);\r\n        this.getStartValue = this.getStartValue.bind(this);\r\n        this.createNewQuiz = this.createNewQuiz.bind(this);\r\n        this.checkAnswer = this.checkAnswer.bind(this);\r\n        this.getScore = this.getScore.bind(this);\r\n        this.endQuiz = this.endQuiz.bind(this);\r\n        this.getRadioChangeValue = this.getRadioChangeValue.bind(this);\r\n    }\r\n\r\n    async getData(url) {\r\n        try {\r\n            const response = await fetch(url);\r\n            if(response.ok) {\r\n              const jsonResponse = await response.json();\r\n              console.log(jsonResponse)\r\n              return jsonResponse;\r\n            }\r\n            throw new Error('Request failed!');\r\n          } catch(error) {\r\n            console.log(error)\r\n          }\r\n    }\r\n\r\n    async getCategories() {\r\n        let endpoint = 'https://opentdb.com/api_category.php';\r\n        let res = await this.getData(endpoint);\r\n        // console.log(res)\r\n        this.setState(function() {\r\n            return {\r\n                categories: res.trivia_categories\r\n            }\r\n        })\r\n    }\r\n\r\n    getStartValue(e) {\r\n        let elm = e.currentTarget;\r\n        let textVal = elm.value;\r\n        let type = elm.getAttribute('typeval');\r\n        this.setState(function() {\r\n            return {\r\n                [type]: textVal\r\n            }\r\n        })\r\n    }\r\n\r\n    async createNewQuiz() {\r\n        const amount = 'amount=10&';\r\n        let endpoint = 'https://opentdb.com/api.php?'+amount;\r\n        const queryTerms = ['category', 'difficulty', 'type'];\r\n        let state = this.state;\r\n        queryTerms.forEach(function(item, index) {\r\n            if(state[item]) {\r\n                if(index === 0) {\r\n                    endpoint += item+'='+state[item]\r\n                } else {\r\n                    endpoint += '&'+item+'='+state[item]\r\n                }\r\n            }\r\n        })\r\n        console.log(endpoint)\r\n        \r\n        let response = await this.getData(endpoint)\r\n        this.random(response.results)\r\n        if(response && response.response_code === 0) {\r\n            this.setState(function() {\r\n                return {\r\n                    quizData: response,\r\n                    quizStart: true,\r\n                    score: 0,\r\n                    responseError: false\r\n                }\r\n            })\r\n        } else if(response.response_code === 1) {\r\n            this.setState(function() {\r\n                return {\r\n                    responseError: true,\r\n                    responseErrorMessage: 'no results found try changing the search options'\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    endQuiz() {\r\n        this.setState(function() {\r\n            return {\r\n                quizStart: false\r\n            }\r\n        })\r\n    }\r\n\r\n    checkAnswer(index, correct) {\r\n        // console.log(val)\r\n        // this.setState(function(prevState) {\r\n        //     prevState.quizData.results[0].isCorrect = true\r\n        //     return {\r\n        //         quizData: prevState\r\n        //     }\r\n        // })\r\n        \r\n        if(!this.state.quizData.results[index].answered) {\r\n            this.state.quizData.results[index].isCorrect = correct\r\n            // this.setState({\r\n            //     quizData: this.state.quizData\r\n            // })\r\n            this.setState(function() {\r\n                return {\r\n                    quizData: this.state.quizData\r\n                }\r\n            })\r\n        }\r\n        this.state.quizData.results[index].answered = true;\r\n\r\n\r\n        // if(!this.state.quizData.results[index].answered) {\r\n        //     this.setState(function(prevState) {\r\n        //         return {\r\n        //             quizData: prevState.quizData.results[index].isCorrect = correct,\r\n        //         }\r\n        //     })\r\n        //     // this.setState(function(prevState) {\r\n        //     //     return {\r\n        //     //         quizData: prevState.quizData.results[index].answered = true\r\n        //     //     }\r\n        //     // })\r\n        // }\r\n\r\n    }\r\n\r\n    getScore() {\r\n        let score = 0;\r\n        this.state.quizData.results.forEach(item => {\r\n            if(item.answered && item.isCorrect) {\r\n                score++;\r\n            }\r\n        })\r\n        this.setState({\r\n            score: score\r\n        })\r\n    }\r\n\r\n    getRadioChangeValue(e) {\r\n        let text = e.currentTarget.value;\r\n        this.setState({\r\n            radioValue: text\r\n        })\r\n    }\r\n\r\n    checkRadio(index, correct) {\r\n        if(!this.state.quizData.results[index].answered) {\r\n            this.setState(function(prevState) {\r\n                return {\r\n                    quizData: prevState.quizData.results[index].isCorrect = correct,\r\n                }\r\n            })\r\n            this.setState(function(prevState) {\r\n                return {\r\n                    quizData: prevState.quizData.results[index].answered = true\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    random(arr) {\r\n        function getRandomInt(min, max) {\r\n            min = Math.ceil(min);\r\n            max = Math.floor(max);\r\n            return Math.floor(Math.random() * (max - min + 1)) + min;\r\n        }\r\n        arr.forEach(function(item) {\r\n            //generate a randomized array of possible answers and add the new array to each object as a property\r\n            let answers = item.incorrect_answers.map(item => item);\r\n            let correctAnswer = item.correct_answer;            \r\n            let randomIndex = getRandomInt(0, answers.length);\r\n            answers.splice(randomIndex, 0, correctAnswer)\r\n\r\n            item.randomAnswers = answers;\r\n        })\r\n    }\r\n\r\n\r\n\r\n\r\n    componentDidMount() {\r\n        this.getCategories()\r\n    }\r\n\r\n    render() {\r\n        let categoryName;\r\n        if(this.state.category) {\r\n            console.log('sfshfksjdhfdksjhfsdkfdsjh')\r\n            let catId;\r\n            this.state.categories.forEach((item, index) => {\r\n                if(item.id === parseInt(this.state.category)) {\r\n                    catId = index\r\n                }\r\n            })\r\n            if(catId !== undefined) {\r\n                categoryName = this.state.categories[catId].name;\r\n            }\r\n            console.log(categoryName)\r\n        }\r\n\r\n        //response error\r\n        let noResponseError = this.state.responseError ? <p className=\"no-results\">{this.state.responseErrorMessage}</p> : null;\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                {this.state.quizStart ? null : <Start categories={this.state.categories} handleChange={this.getStartValue} startQuiz={this.createNewQuiz} noResponseError={noResponseError}/>}\r\n                {this.state.quizStart && (this.state.responseError === false) \r\n                    ? \r\n                    <Quiz \r\n                        questionsArray={this.state.quizData} \r\n                        check={this.checkAnswer} score={this.getScore} \r\n                        scoreNum={this.state.score} endQuiz={this.endQuiz}\r\n                        getRadioValue={this.getRadioChangeValue}\r\n                        radioValue={this.state.radioValue}\r\n                        categoryName={categoryName}\r\n                        diff={this.state.difficulty}\r\n                    />\r\n                    : \r\n                    null}\r\n\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}","C:\\react-projects\\trivia-quiz\\src\\quiz.js",[],"C:\\react-projects\\trivia-quiz\\src\\start.js",[],"C:\\react-projects\\trivia-quiz\\src\\question-item.js",["41"],"import React from 'react';\r\nimport RadioButton from './radio-button';\r\n\r\nexport default class QuestionItem extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let userCorrectAnswer;\r\n        let hasAnswered;\r\n        if(this.props.question.isCorrect === true || this.props.question.isCorrect === false) {\r\n            hasAnswered = true;\r\n        } else {\r\n            hasAnswered = false;\r\n        }\r\n        // let jsonText = JSON.parse(this.props.question);\r\n        return (\r\n            <div className=\"question-item-container\">\r\n                <div className=\"col2-container\">\r\n                    <p className=\"item\">question: {this.props.pageNum + 1} / {this.props.maxPage + 1}</p>\r\n                    <p className=\"item\">score: {this.props.scoreNum}</p>\r\n                </div>\r\n\r\n                <div className=\"col2-container\" id=\"nav-buttons-container\">\r\n                    <button className=\"item form-field-default small-button\" onClick={this.props.prev}>prev</button>\r\n                    <button className=\"item form-field-default small-button\" onClick={this.props.next}>next</button>\r\n                </div>\r\n\r\n                <p className=\"question\">{\"\"+this.props.question.question}</p>\r\n\r\n                <p>{this.props.question.isCorrect ? 'correct' : null}</p>\r\n                <p>{this.props.question.isCorrect === false ? 'wrong! the correct answer is: '+this.props.question.correct_answer : null}</p>\r\n\r\n                <ul className=\"possiple-answers-container\">\r\n                    {\r\n                        this.props.question.randomAnswers.map(function(item) {\r\n                            return (\r\n                                <RadioButton \r\n                                    text={item}\r\n                                    check={this.props.check}\r\n                                    hasAnswered={hasAnswered}\r\n                                    userCorrectAnswer={this.props.question.correct_answer}\r\n                                    isCorrect={this.props.question.isCorrect}\r\n                                    getRadioValue={this.props.getRadioValue}\r\n                                />\r\n                            );\r\n                        }.bind(this))\r\n                    }\r\n                    {/* {<RadioButton text={this.props.question.correct_answer} check={this.props.check}/>} */}\r\n                </ul>\r\n                <button className=\"form-field-default start-button\" onClick={this.props.check}>Submit</button>\r\n                {/* <button value={this.props.question.correct_answer} onClick={this.props.check}>check</button> */}\r\n            </div>\r\n        );\r\n    }    \r\n}","C:\\react-projects\\trivia-quiz\\src\\select.js",[],"C:\\react-projects\\trivia-quiz\\src\\radio-button.js",[],"C:\\react-projects\\trivia-quiz\\src\\option.js",[],{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":113,"column":13,"nodeType":"48","endLine":113,"endColumn":47},{"ruleId":"46","severity":1,"message":"47","line":123,"column":9,"nodeType":"48","endLine":123,"endColumn":43},{"ruleId":"49","severity":1,"message":"50","line":13,"column":13,"nodeType":"51","messageId":"52","endLine":13,"endColumn":30},"no-native-reassign",["53"],"no-negated-in-lhs",["54"],"react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","no-unused-vars","'userCorrectAnswer' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]